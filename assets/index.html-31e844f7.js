import{_ as t,r as l,o,c as r,f as c,a,b as n,d as i,e}from"./app-723c16bd.js";const p={},d=a("h1",{id:"_20分钟学会使用git",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_20分钟学会使用git","aria-hidden":"true"},"#"),n(" 💻 20分钟学会使用git")],-1),g=a("p",null,"Git作为最为重要的版本控制工具之一，在现代代码管理中扮演着不可或缺的角色。包括版本控制，修改跟踪，版本回滚等等。为此，我将简单的把 Git 常用的过程记录一下，尽量不使用命令行等操作，涉及比较难理解的部分都略过，以供参考。",-1),h=a("h2",{id:"初始化本地环境",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#初始化本地环境","aria-hidden":"true"},"#"),n(" 初始化本地环境")],-1),u={href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="安装-git" tabindex="-1"><a class="header-anchor" href="#安装-git" aria-hidden="true">#</a> 安装 Git</h3><p>安装 Git-scm，只需要一步一步的傻瓜式下一步即可，注意要勾选加入 Path 的选项</p><h3 id="填写配置文件" tabindex="-1"><a class="header-anchor" href="#填写配置文件" aria-hidden="true">#</a> 填写配置文件</h3><p>首次安装后，需要配置个人信息，以供远程仓库或者协作者识别你的个人信息(用户名和邮箱)。以我的为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;Hao Wang&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;waynehfut@outlook.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203421.png" alt="git config" tabindex="0" loading="lazy"><figcaption>git config</figcaption></figure><p>之后云端及协作端都会以这样的信息来识别你。</p><h3 id="配置-ssh-访问" tabindex="-1"><a class="header-anchor" href="#配置-ssh-访问" aria-hidden="true">#</a> 配置 SSH 访问</h3><p>需要注意的是，很多情况下我们用到的都是私有仓库，这时为了保证仓库不会被别人破坏，我们需要对访问者设置权限，此时，我们需要在本地生成唯一的识别码。</p>`,9),b={href:"https://help.github.com/cn/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent",target:"_blank",rel:"noopener noreferrer"},f=e(`<li><p>打开 shell(cmd)，执行 &lt;注意替换自己的邮箱&gt;</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-b</span> <span class="token number">4096</span> <span class="token parameter variable">-C</span> <span class="token string">&quot;waynehfut@outlook.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>会出现这样的执行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&gt;</span> Generating public/private rsa key pair.
<span class="token operator">&gt;</span> Enter a <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/c/Users/you/.ssh/id_rsa<span class="token punctuation">)</span>:<span class="token punctuation">[</span>Press enter<span class="token punctuation">]</span>
<span class="token operator">&gt;</span> Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: <span class="token punctuation">[</span>Type a passphrase<span class="token punctuation">]</span>
<span class="token operator">&gt;</span> Enter same passphrase again: <span class="token punctuation">[</span>Type passphrase again<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一般一路按 Enter 到底即可，当看到这个结果时，即表示生成成功</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203457.png" alt="ssh key" tabindex="0" loading="lazy"><figcaption>ssh key</figcaption></figure></li>`,1),v=a("p",null,"在远程代码仓库配置",-1),k={href:"https://github.com/settings/keys",target:"_blank",rel:"noopener noreferrer"},_=a("code",null,"New SSH key",-1),y=a("code",null,"C:\\Users\\$yourname$\\.ssh",-1),x=a("code",null,"id_rsa.pub",-1),w=a("figure",null,[a("img",{src:"https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203515.png",alt:"add key",tabindex:"0",loading:"lazy"}),a("figcaption",null,"add key")],-1),E=e(`<li><p>测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>出现类似以下输出即表示添加成功</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203542.png" alt="test ssh" tabindex="0" loading="lazy"><figcaption>test ssh</figcaption></figure></li>`,1),j=e(`<h2 id="与远程同步" tabindex="-1"><a class="header-anchor" href="#与远程同步" aria-hidden="true">#</a> 与远程同步</h2><p>我们使用 Git 一般有两种初始场景，一个是远程的代码直接拉下来，一个是本地代码想推出去。下面举例最简单的方法。</p><h3 id="同步远程代码库" tabindex="-1"><a class="header-anchor" href="#同步远程代码库" aria-hidden="true">#</a> 同步远程代码库</h3><p>如果远程代码库已经设置好了，可以直接从 git clone 下来。以这个仓库为例：</p><ol><li><p>点击这个部分的按钮复制 ssh 路径</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203602.png" alt="copy ssh" tabindex="0" loading="lazy"><figcaption>copy ssh</figcaption></figure></li><li><p>在本地的 shell(cmd)打开并执行 git clone 命令</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:Waynehfut/CNNDetectFramework.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似这样的结果，即表示拉取成功</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203619.png" alt="git cloned" tabindex="0" loading="lazy"><figcaption>git cloned</figcaption></figure><ol><li>我们在本地就会发现代码已经拉取下来（文件夹名称与项目同名）</li></ol><h3 id="本地创建代码库" tabindex="-1"><a class="header-anchor" href="#本地创建代码库" aria-hidden="true">#</a> 本地创建代码库</h3><ol><li>如果是本地创建项目，可以先在远程仓库创建一个空白仓库，直接新建即可：</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203643.png" alt="create repo" tabindex="0" loading="lazy"><figcaption>create repo</figcaption></figure><ol><li>为方便起见，不要使用平台提供的任何文件，不使用 readme 初始化。</li></ol><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203704.png" alt="create" tabindex="0" loading="lazy"><figcaption>create</figcaption></figure><ol><li>初始化本地项目信息</li></ol><p>在项目根目录下执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init <span class="token comment"># 该步骤是指定当前文件夹为git仓库</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token parameter variable">-A</span> <span class="token comment"># 该步骤是将所有文件设置为git追溯文件</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;first commit&quot;</span> <span class="token comment"># 提交当前状态到暂存，并填写信息为\`first commit\`</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:Waynehfut/test.git <span class="token comment"># 添加远程仓库</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master <span class="token comment"># 将本地状态推送到远程仓库</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>可能会觉得很麻烦，所有我们可以使用 vscode 或者 github desktop 等 GUI 工具实施上述操作，以 vscode 为例：</li></ol><ul><li>我们打开一个项目文件夹，并点击左侧的源代码管理按钮，我们可以看到很多待提交的更改（注意，该文件夹已经初始化了远程仓库）：</li></ul><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203728.png" alt="project" tabindex="0" loading="lazy"><figcaption>project</figcaption></figure><ul><li><p>先填写 commit 信息，并点击“+”号暂存本地。</p><p>效果等同于命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token operator">&lt;</span>file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203748.png" alt="add info" tabindex="0" loading="lazy"><figcaption>add info</figcaption></figure><ul><li><p>点击提交，提交的待同步更改</p><p>效果等同于命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;message&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203807.png" alt="commit" tabindex="0" loading="lazy"><figcaption>commit</figcaption></figure><ul><li><p>同步仓库</p><p>效果等同于命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> pull <span class="token operator">&lt;</span>remote-branch<span class="token operator">&gt;</span>
<span class="token function">git</span> push <span class="token operator">&lt;</span>remote-branch<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>local-branch<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203827.png" alt="sync" tabindex="0" loading="lazy"><figcaption>sync</figcaption></figure><p>这样就可以提交代码到远程仓库</p><h2 id="其他操作" tabindex="-1"><a class="header-anchor" href="#其他操作" aria-hidden="true">#</a> 其他操作</h2><p>还有一些其他操作需要了解</p><h3 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> .gitignore</h3><p>有时我们的本地仓库有很多是不希望提交到远程的，甚至不想 git 来追踪它们，我们可以使用.gitignore 来屏蔽这些文件。</p>`,31),z={href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"},G=e(`<p>语法规则为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*.txt <span class="token comment"># 屏蔽所有txt文件</span>
/unsedfolder/ <span class="token comment"># 屏蔽名为unsedfolder的文件夹</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="回滚" tabindex="-1"><a class="header-anchor" href="#回滚" aria-hidden="true">#</a> 回滚</h3><p>有时，我们写代码会希望回到上一个状态，针对不同状态，有不同的做法：</p><ol><li><p>已提交 commit 未同步 push</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset HEAD <span class="token operator">&lt;</span>fileName<span class="token operator">&gt;</span> <span class="token comment"># 对&lt;fileName&gt;文件取消提交</span>
<span class="token function">git</span> checkout <span class="token operator">&lt;</span>fileName<span class="token operator">&gt;</span> <span class="token comment"># 对&lt;filename&gt;文件回退</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>已同步 push 一般情况下，我们每次的提交都会有 commit id, 我们可以使用这个 id 来回退到这状态，如图中的 commit 后的一长串字符就是 commitID</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token comment"># 显示所有log信息&#39;</span>
<span class="token function">git</span> revert commitID <span class="token comment">#依据commitID回退</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/20201124203847.png" alt="gitlog" tabindex="0" loading="lazy"><figcaption>gitlog</figcaption></figure></li></ol><h3 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h3>`,6),N={href:"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6",target:"_blank",rel:"noopener noreferrer"},q=e('<h3 id="协作" tabindex="-1"><a class="header-anchor" href="#协作" aria-hidden="true">#</a> 协作</h3><p>你可以为你的仓库指定多个人管理，这样就有了协作问题，此时推荐使用 Gitlens 插件，以观察代码的修改过程。同时协作过程中会有代码冲突的可能，即你们同时修改了某个文件的某行，这样就会有冲突存在，大部分情况下 git 可以自行处理并合并，如果无法处理，一般会保留冲突部分，交由自己解决。</p><p>需要注意的是，防止冲突的关键是我们提交代码的顺序，我们<strong>需要首先(commit),接着拉取代码(pull)</strong>,冲突只可能在这个过程出现,注意解决它,接着再 push 即可。vscode 中将这个过程简化为了<code>同步（Ctrl+T）</code>。</p><h3 id="私有仓库" tabindex="-1"><a class="header-anchor" href="#私有仓库" aria-hidden="true">#</a> 私有仓库</h3><p>Github 和 Gitlab 现在都支持私有仓库，所以如果不开源，建议设置私有仓库以保证数据安全。</p>',5);function B(A,C){const s=l("ExternalLinkIcon");return o(),r("div",null,[d,g,c(" more "),h,a("p",null,[n("初始化本地环境，首先需要安装 Git 软件。 从"),a("a",u,[n("git-scm"),i(s)]),n("下载对应平台安装包即可。")]),m,a("p",null,[n("详细可参考"),a("a",b,[n("github"),i(s)])]),a("ol",null,[f,a("li",null,[v,a("p",null,[n("一般远程的代码仓库都支持 ssh，以 GitHub 为例，在"),a("a",k,[n("这个链接"),i(s)]),n("中点击"),_,n("； 填写从"),y,n("下"),x,n("内的内容到 github 上")]),w]),E]),j,a("p",null,[n("这里 "),a("a",z,[n("git ignore template"),i(s)]),n("有很多模板可以直接套用。")]),G,a("p",null,[n("有时，我们希望多个分支来开发，一般会有 master 或 dev，细节部分请参考 "),a("a",N,[n("Git-分支-分支的新建与合并"),i(s)])]),q])}const D=t(p,[["render",B],["__file","index.html.vue"]]);export{D as default};

import{_ as e,o as a,c as i,e as r}from"./app-723c16bd.js";const t={},n=r('<h1 id="第四章-队列-queue" tabindex="-1"><a class="header-anchor" href="#第四章-队列-queue" aria-hidden="true">#</a> 📘 第四章 队列(Queue)</h1><p>当我们到热门餐厅就餐时，经常需要排队叫号，那你是否有想过，计算机是怎么记录这些数据，并及时的叫号的呢？</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309081007476.png" alt="图源：美味不用等" tabindex="0" loading="lazy"><figcaption>图源：美味不用等</figcaption></figure><p>假使我们要来设计一个数据结构来实现这样的功能，那么最起码得能力是遵循先来后到的原则，并且在就餐或者过号后及时的更新这些数据，这里就要用到我们本章的数据结构，<strong>队列(Queue)</strong>。</p><p>队列实际上是一个遵循先入先出顺序的表，因此可以使用数组或者链表的方式进行实现。</p><h2 id="队列模型" tabindex="-1"><a class="header-anchor" href="#队列模型" aria-hidden="true">#</a> 队列模型</h2><h2 id="顺序表实现" tabindex="-1"><a class="header-anchor" href="#顺序表实现" aria-hidden="true">#</a> 顺序表实现</h2><h2 id="链表实现" tabindex="-1"><a class="header-anchor" href="#链表实现" aria-hidden="true">#</a> 链表实现</h2>',8),d=[n];function h(c,s){return a(),i("div",null,d)}const u=e(t,[["render",h],["__file","index.html.vue"]]);export{u as default};

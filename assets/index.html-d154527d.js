import{_ as e,r as c,o,c as l,a as n,b as s,d as p,e as a}from"./app-723c16bd.js";const i={},u=a('<h1 id="第三章-栈-stack" tabindex="-1"><a class="header-anchor" href="#第三章-栈-stack" aria-hidden="true">#</a> 📘 第三章 栈(Stack)</h1><p>当你在计算机中启动计算器程序，并按下计算的公式时，你是否想过，<code>1+2=3</code>是如何计算的？</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309010943297.png" alt="计算器" tabindex="0" loading="lazy"><figcaption>计算器</figcaption></figure><p>当我们在浏览网页时，浏览器是怎么记得我们上一步浏览了那个页面呢？</p><figure><img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309010941772.png" alt="浏览器历史记录" tabindex="0" loading="lazy"><figcaption>浏览器历史记录</figcaption></figure><p>这一切都需要用到我们本章的内容，为了实现上述需求，有关算法专家设计了称之为 <strong>栈(Stack)</strong> 的数据结构。栈是一类特殊的表，它是限定了仅在表尾进行插入或删除的表。其中加入数据称之为入栈(Push)，出栈称之为(Pop)，它的头尾也有了特殊的别称，执行增删操作的称之为栈顶(Top)，最底层的数据称之为栈底(Bottom)，如果没有数据存储，那这个栈称之为空栈。需要注意的是，栈只有栈顶事可以访存的，那也就意味着先进入到栈中的数据是被“压”在最低端，是一个 <strong>后进先出(Last In First Out, LIFO)</strong> 的结构。 <img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309011001052.png" alt="栈的基本形态" loading="lazy"></p>',6),d={class:"hint-container info"},k=n("p",{class:"hint-container-title"},"拓展阅读",-1),r={href:"https://www.digitalocean.com/community/tutorials/java-heap-space-vs-stack-memory",target:"_blank",rel:"noopener noreferrer"},m=a(`<h2 id="栈-adt" tabindex="-1"><a class="header-anchor" href="#栈-adt" aria-hidden="true">#</a> 栈 ADT</h2><p>在讨论了上述内容后，我们来看下栈的常见操作：</p><table><thead><tr><th>操作方法</th><th>功能描述</th></tr></thead><tbody><tr><td>push(x)</td><td>将对象 x 压入栈</td></tr><tr><td>pop()</td><td>将栈顶元素移除</td></tr><tr><td>getSize()</td><td>获取栈大小</td></tr><tr><td>isEmpty()</td><td>是否为空</td></tr><tr><td>top()</td><td>取栈顶</td></tr></tbody></table><p>上述操作是 Java 接口中对栈的部分相关方法定义，在使用过程中则会有以下的效果</p><table><thead><tr><th>操作方法</th><th>操作</th><th>栈(右侧为栈顶)</th><th>输出</th></tr></thead><tbody><tr><td>push(5)</td><td>将 5 压入栈</td><td>(5)</td><td></td></tr><tr><td>push(3)</td><td>将 3 压入栈</td><td>(5,3)</td><td></td></tr><tr><td>getSize()</td><td>获取当前栈大小</td><td>(5,3)</td><td>2</td></tr><tr><td>pop()</td><td>移除栈顶</td><td>(5)</td><td></td></tr><tr><td>isEmpty()</td><td>是否为空</td><td>(5)</td><td>false</td></tr><tr><td>top()</td><td>取栈顶</td><td>(5)</td><td>5</td></tr></tbody></table><h2 id="栈的实现" tabindex="-1"><a class="header-anchor" href="#栈的实现" aria-hidden="true">#</a> 栈的实现</h2><p>由于栈是一个表，实际上它也和表有类似的实现方式，例如使用<code>ArrayList</code>和<code>LinkedList</code>分别实现的栈，称之为顺序栈和链栈，Java 中也直接提供了栈的实现<code>Stack</code>。</p><h3 id="顺序栈" tabindex="-1"><a class="header-anchor" href="#顺序栈" aria-hidden="true">#</a> 顺序栈</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStack</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stack<span class="token punctuation">;</span> <span class="token comment">// 数据存储</span>
    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">// 栈最大数量</span>
    <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶位置</span>

    <span class="token keyword">public</span> <span class="token class-name">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>
        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//是否已满</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> maxSize <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> top<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//是否为空</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//入栈</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;栈已满&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        stack<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//出栈</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;栈中无数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//打印栈信息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;栈中无数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> top<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;index=%d, value=%d \\n&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> stack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="链栈" tabindex="-1"><a class="header-anchor" href="#链栈" aria-hidden="true">#</a> 链栈</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedListStack</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span> <span class="token comment">// 最大支持数</span>
    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">// 当前栈中元素个数</span>
    <span class="token comment">// 用来记录栈顶的元素</span>
    <span class="token class-name">Node</span> top<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LinkedListStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxSize <span class="token operator">=</span> maxSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//是否已满</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> maxSize<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//是否为空</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//入栈</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;栈已满&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 要保证 top 是最后进来的</span>
        <span class="token class-name">Node</span> temp <span class="token operator">=</span> top<span class="token punctuation">;</span>
        top <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        top<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        size<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//出栈</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;栈已空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// top 保存的是最后入栈的元素，直接从 top 取出即可</span>
        <span class="token class-name">Node</span> temp <span class="token operator">=</span> top<span class="token punctuation">;</span>
        top <span class="token operator">=</span> temp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        size<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> temp<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//打印栈信息</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;栈已空&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Node</span> cur <span class="token operator">=</span> top<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Node{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;value=&quot;</span> <span class="token operator">+</span> value <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="栈的应用" tabindex="-1"><a class="header-anchor" href="#栈的应用" aria-hidden="true">#</a> 栈的应用</h2><p>在熟悉了栈以后，我们就可以利用它完成许多复杂的工作了，例如完成一个计算器的核心计算逻辑。 假设，我们需要计算：</p>`,13),v=n("p",{class:"katex-block"},[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[n("semantics",null,[n("mrow",null,[n("mn",null,"2"),n("mo",null,"∗"),n("mn",null,"5"),n("mo",null,"+"),n("mn",null,"6"),n("mo",null,"−"),n("mn",null,"5"),n("mo",null,"∗"),n("mo",{stretchy:"false"},"("),n("mn",null,"8"),n("mo",null,"−"),n("mn",null,"3"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mo",null,"−"),n("mn",null,"9")]),n("annotation",{encoding:"application/x-tex"}," 2*5+6-5*(8-3)=-9 ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"2"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"6"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"5"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"∗"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"8"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"3"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.7278em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},"−"),n("span",{class:"mord"},"9")])])])])],-1),b=a('<p>在计算器里，我们输入的顺序应当是： <img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309011706838.png" alt="计算器计算" loading="lazy"> 但是我们按照计算优先级规则，实际上是先计算<code>2*5=10</code>后,计算<code>10+6=16</code>后，再计算<code>8-3=5</code>，接着计算<code>5*5=25</code>,最后<code>16-25=-9</code>的，如果我们先把相关表达式放在右侧，如果我们将上述表达式中的数字在前，运算符号在后的顺序排列出来的话，就可以得到<code>2,5,*,6,+,5,8,3,-,*,-</code>，再把这些字符按顺序放在左侧。那这和栈又有什么关系呢？ <img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309061631885.png" alt="栈使用情况" loading="lazy"> 我们可以尝试着将这些字符按顺序放到栈里，并规定每次遇到符号的就是就将栈顶的前两个数字按照先右后左的顺序进行运算，并将运算后的结果再放回栈中，再看看会发生什么。 <img src="https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309061624118.gif" alt="公式的栈运算" loading="lazy"> 通过上述动图，我们可以看到每次栈中遇到计算符号时，所进行的运算和我们实际的运算先后顺序是完全一致的，那只要我们按上述字符的顺序将表达式输入栈，就可以让计算机来为我们处理表达式了，这个特殊的字符串顺序记法称之为后缀记法，对应的表达式字符串称之为<strong>后缀表达式</strong>。相应的，原始的表达式称之为<strong>中缀表达式</strong>。</p>',1),y=n("div",{class:"hint-container info"},[n("p",{class:"hint-container-title"},"后缀表达式的优势"),n("p",null,[s("后缀表达式的优势在于，在转换好后缀表达式后几乎不用规定符号或者括号优先级，可以通过"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"N"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(N)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"N"),n("span",{class:"mclose"},")")])])]),s("的时间复杂度完成对表达式的运算。")])],-1),h=a(`<h3 id="中缀表达式转后缀表达式" tabindex="-1"><a class="header-anchor" href="#中缀表达式转后缀表达式" aria-hidden="true">#</a> 中缀表达式转后缀表达式</h3><p>一般来说，最快速的办法是按照上述的思路手工推出来，即：把实际运算过程按顺序写出，但需要注意括号等影响表达式计算顺序的符号。但既然栈可以用来计算后缀表达式的值，那是否可以用栈来转换中缀表达式呢？</p><p>下面提供一种基于栈的转换思路：</p><ol><li><p>从左至右，遇到数字直接输出</p></li><li><p>遇到运算符时：</p><ul><li>如果是&quot;(&quot;则直接入栈；</li><li>若为&quot;)&quot;则将栈中的符号依次输出，直到&quot;(&quot;，并将&quot;(&quot;出栈，但不输出；</li><li>若为其他符号，将栈中的符号依次出栈并输出，直到遇到比当前符号优先级更低的符号或者&quot;(&quot;,并将当前符号入栈。</li></ul></li><li><p>遍历完后，将栈中剩余符号输出，其中&quot;(&quot;不输出。</p></li></ol><p>我们还是以上述表达式为例：</p><table><thead><tr><th style="text-align:center;">当前元素</th><th style="text-align:center;">符号栈</th><th style="text-align:center;">输出</th></tr></thead><tbody><tr><td style="text-align:center;">2</td><td style="text-align:center;">-</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">*</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">*</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">+</td><td style="text-align:center;">*</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:center;">+</td><td style="text-align:center;">6</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">+</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:center;">-</td><td style="text-align:center;">5</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">-*</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">(</td><td style="text-align:center;">-*(</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">8</td><td style="text-align:center;">-*(</td><td style="text-align:center;">8</td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">-*(-</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:center;">-*(-</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:center;">)</td><td style="text-align:center;"></td><td style="text-align:center;">-*-</td></tr></tbody></table><div class="hint-container warning"><p class="hint-container-title">问题 3.1: 中缀表达式转换算法</p><p>依据上述规则，可以编制出中缀表达式算法，请思考具体实现。</p><details class="hint-container details"><summary>参考代码</summary><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Stack</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 中缀表达式转后缀表达式
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InfixToSuffix</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InfixToSuffix</span> infixToSuffix <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InfixToSuffix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 目标：1+((2+3)*4)-5 转为 1 2 3 + 4 * + 5 -</span>
        <span class="token comment">// 1. 将中缀表达式转成 List，方便在后续操作中获取数据</span>
        <span class="token class-name">String</span> infixExpression <span class="token operator">=</span> <span class="token string">&quot;1+((2+3)*4)-5&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> infixList <span class="token operator">=</span> infixToSuffix<span class="token punctuation">.</span><span class="token function">infix2List</span><span class="token punctuation">(</span>infixExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>infixList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, +, (, (, 2, +, 3, ), *, 4, ), -, 5]</span>
        <span class="token comment">// 2. 将中缀表达式转成后缀表达式</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> suffixList <span class="token operator">=</span> infixToSuffix<span class="token punctuation">.</span><span class="token function">infixList2SuffixList</span><span class="token punctuation">(</span>infixList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>suffixList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, +, 4, *, +, 5, -]</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 将中缀表达式解析成单个元素的 List，
     *
     * <span class="token keyword">@param</span> <span class="token parameter">infixExpression</span>
     * <span class="token keyword">@return</span> 1+((2+3)*4)-5 -&gt; [1,+,(,(,2,+,3,),*,4,),5]
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">infix2List</span><span class="token punctuation">(</span><span class="token class-name">String</span> infixExpression<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 扫描并解析</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> tempNum <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 支持多位数</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> infixExpression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ch <span class="token operator">=</span> infixExpression<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>index<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果不是数字，就是符号，直接添加到容器中</span>
            <span class="token comment">// 0 = 48, 9 = 57</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果拼接的多位数还有值，则添加到容器中</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempNum<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tempNum <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ch <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果是数字，则考虑处理多位数</span>
            tempNum <span class="token operator">+=</span> ch<span class="token punctuation">;</span>
            <span class="token comment">// 如果已经是最后一个字符了，则将这个多位数添加到容器中</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> infixExpression<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tempNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                tempNum <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 中缀表达式 List 转为后缀表达式 List
     *
     * <span class="token keyword">@param</span> <span class="token parameter">infixList</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">infixList2SuffixList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> infixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 符号栈</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 思路是使用栈来存储表达式元素</span>
        <span class="token comment">// 仔细观察他的解析步骤，会发现：只是在入栈，并未出现出栈操作</span>
        <span class="token comment">// 而且，最后的结果还要逆序，所以这里使用 list，直接顺序读取出来就是最后的结果了</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> infixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是数字，则加入 s2</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\d+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果是左括号，直接压入 s1</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果是右括号</span>
            <span class="token comment">// 则依次弹出 s1 栈顶的运算符，并压入 s2，直到遇到 左括号 为止，此时将这一对括号 丢弃</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果不是左括号，则取出 s1 中的符号，添加到 s2 中</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;(&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// 上面循环完之后，那么就是遇到了左括号</span>
                <span class="token comment">// 则直接弹出这个左括号丢弃</span>
                s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 剩下的则是运算符</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// 如果 s1 为空，或则栈顶运算符为 （，则压入符号栈 s1</span>
                <span class="token comment">// 如果优先级比栈顶运算符 高，则压入符号栈 s1,否则，否则将 s1 栈顶的运算符弹出，压入 s2 中</span>
                <span class="token comment">// 上面两句话，转换成下面的描述</span>
                <span class="token comment">// 上面如果 s1 栈顶符号优先级比 当前符号高，则弹出加入到 s2 中。</span>
                <span class="token comment">// 因为：如果栈顶符号是 （ 返回优先级为 -1.比当前符号低，则不会走该方法</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">priority</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">priority</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                s1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 将 s1 中的运算符依次弹出并加入 s2 中</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            s2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> s2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 计算操作符号优先级，暂时只支持 + - * /
     *
     * <span class="token keyword">@param</span> <span class="token parameter">ch</span>
     * <span class="token keyword">@return</span> 优先级越高，数值越大
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token char">&#39;*&#39;</span><span class="token operator">:</span>
            <span class="token keyword">case</span> <span class="token char">&#39;/&#39;</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details></div><h2 id="java-deque-api" tabindex="-1"><a class="header-anchor" href="#java-deque-api" aria-hidden="true">#</a> Java Deque API</h2>`,8),g=n("code",null,"Vector",-1),f={href:"https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html",target:"_blank",rel:"noopener noreferrer"},w=n("code",null,"push",-1),x=n("code",null,"pop",-1),S=a("<table><thead><tr><th>Stack 方法</th><th>Deque 的等价方法</th></tr></thead><tbody><tr><td>push(e)</td><td>addFirst(e)</td></tr><tr><td>pop()</td><td>removeFirst()</td></tr><tr><td>top()/peek()</td><td>peekFirst()</td></tr></tbody></table>",1),q={class:"hint-container info"},_=n("p",{class:"hint-container-title"},"参见 Java Stack API",-1),L={href:"https://docs.oracle.com/javase/8/docs/api/java/util/Stack.html",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"Vector",-1),z=n("code",null,"synchronized",-1),E=n("img",{src:"https://cdn.jsdelivr.net/gh/waynehfut/img@img/img/202309080926200.png",alt:"Stack API不被推荐",loading:"lazy"},null,-1);function N(A,I){const t=c("ExternalLinkIcon");return o(),l("div",null,[u,n("div",d,[k,n("p",null,[s("栈是较早出现在计算机中的数据结构之一，在计算机内存管理中，栈是实现进程局部优先级控制最有效的办法，例如局部变量的新建和释放、局部函数的参数值传递等等，有兴趣可进一步阅读。"),n("a",r,[s("Java Heap Space vs Stack - Memory Allocation in Java | DigitalOcean"),p(t)])])]),m,v,b,y,h,n("p",null,[s("值得一提的是，在 Java 中，实际上也提供了更为高层的 Stack API 的实现，但是由于继承自"),g,s("类，导致有大量锁控制，因此这个接口并不推荐使用，官方更加推荐使用"),n("a",f,[s("双向队列（Deque API）"),p(t)]),s("来实现栈的能力，该 API 有着更为灵活的能力，其中作为栈来使用时，有"),w,s("，"),x,s("的对应方法可以使用。而且这个接口有着非常灵活的能力，在下一章中我们将进一步来了解其中细节。")]),S,n("div",q,[_,n("p",null,[n("a",L,[s("Class Stack<E> | Oracle.com"),p(t)]),s("自 Java 1.0 版本就已经进入了 JDK 中，但是其方法存在大量的继承于"),j,s("的"),z,s("方法锁，因此不再被官方推荐。 "),E])])])}const J=e(i,[["render",N],["__file","index.html.vue"]]);export{J as default};

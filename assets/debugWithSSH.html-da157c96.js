import{_ as i,o as t,c as e,e as g}from"./app-723c16bd.js";const a={},n=g('<h1 id="使用ssh进行代码调试" tabindex="-1"><a class="header-anchor" href="#使用ssh进行代码调试" aria-hidden="true">#</a> 💻 使用SSH进行代码调试</h1><p>大多数情况下，我们并不需要服务器的 GUI 来占用宝贵的 GPU 资源，同时远程桌面的方式给开发带来了诸多不可预见的错误，虽然 SFTP 和 X11 转发的方式使得在本地编辑代码很方便，但是对于 debug 等操作却没法很好的完成，被迫开远程桌面进行 debug 。为此，本篇将以 IDEA 家族的 IDE 为例简要介绍如何使用 SSH 进行远程服务器的代码调试，以避免手动同步代码导致的潜在风险。</p><h2 id="配置-ssh" tabindex="-1"><a class="header-anchor" href="#配置-ssh" aria-hidden="true">#</a> 配置 SSH</h2><p>首先，你要有个具有 SSH 访问权限的服务器，关于如何部署 SSH，这里不再赘述。测试是否可以链接到 SSH 服务器，可以使用<code>ssh -T &lt;Username&gt;@&lt;IP&gt;</code>的命令，即可登录。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915164533.png" alt="re ssh" tabindex="0" loading="lazy"><figcaption>re ssh</figcaption></figure><p>有了这个基础，即可配置 IDE 中的 SSH 了，以 IDEA 的 PyCharm 为例，打开<code>File-&gt;Setting-&gt;Tools-&gt;SSH Configurations</code> 输入相应的主机地址、端口、用户名、密码后，即可在 IDE 中配置远程的 SSH 服务器，用以同步代码和远程调试。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915164347.png" alt="ssh conf" tabindex="0" loading="lazy"><figcaption>ssh conf</figcaption></figure><h2 id="增加远程环境" tabindex="-1"><a class="header-anchor" href="#增加远程环境" aria-hidden="true">#</a> 增加远程环境</h2><p>其次，我们的主要目的是将远程服务器作为我们的调试或部署环境，因此还需要为代码添加远程解释器等环境。以 Python 为例，我们打开<code>Setting-&gt;Project:&lt;Project Name&gt;-&gt;Python Interpreter</code>在右侧下拉选择 Show All.</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165246.png" alt="add" tabindex="0" loading="lazy"><figcaption>add</figcaption></figure><p>后再选择添加环境。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165327.png" alt="select" tabindex="0" loading="lazy"><figcaption>select</figcaption></figure><p>选择 SSH 解释器，并在右侧下拉找到之前配置过的服务器</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165409.png" alt="choose" tabindex="0" loading="lazy"><figcaption>choose</figcaption></figure><p>接着，远程环境可能有不同的路径，默认路径可能不是你所需要的，此处可以自行调整</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165522.png" alt="modify" tabindex="0" loading="lazy"><figcaption>modify</figcaption></figure><p>调整完解释器路径后，还需要注意当前项目的映射关系，一般情况下，项目的根目录会映射到/tmp 目录下，也就意味着，一段时间后，代码会被清理掉，如果想保存代码到特定位置，可以在此处修改文件映射。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165651.png" alt="choose path" tabindex="0" loading="lazy"><figcaption>choose path</figcaption></figure><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165849.png" alt="sync" tabindex="0" loading="lazy"><figcaption>sync</figcaption></figure><p>当前，你可以自行在后续重新指定文件映射。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915165931.png" alt="resync" tabindex="0" loading="lazy"><figcaption>resync</figcaption></figure><h2 id="远程调试" tabindex="-1"><a class="header-anchor" href="#远程调试" aria-hidden="true">#</a> 远程调试</h2><p>这时，我们可以在<code>Settings-&gt;Build,Execution,Deployment-&gt;Deployment</code>中看到具体设置，并更新修改相关信息。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915170056.png" alt="info" tabindex="0" loading="lazy"><figcaption>info</figcaption></figure><p>这时，我们在本地 IDE 中运行代码时，就可以发现，所有的执行环节都在远程了。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915170408.png" alt="run" tabindex="0" loading="lazy"><figcaption>run</figcaption></figure><p>你可以像在本地使用一样去打断点和调试，效果可能会更好。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915170500.png" alt="debug" tabindex="0" loading="lazy"><figcaption>debug</figcaption></figure><h2 id="应规避的风险行为" tabindex="-1"><a class="header-anchor" href="#应规避的风险行为" aria-hidden="true">#</a> 应规避的风险行为</h2><ul><li></li></ul><p>要注意的是，平时使用时，默认情况下是同步所有文件到之前的映射中的。因此，当存在文件不需要在本地保存或大量日志文件不需要同步时，请在<code>Settings-&gt;Build,Execution,Deployment-&gt;Deployment</code> 中找到当前的解释器，选择<code>Excluded Paths</code>添加不需要进行同步的路径。</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915170623.png" alt="Ex path" tabindex="0" loading="lazy"><figcaption>Ex path</figcaption></figure><ul><li>避免代码覆盖，一般情况下，当本地代码有修改并保存后，文件会自动上传到远程的 SSH 服务器中，如果不希望这样的执行方式，可以考虑关闭自动上传。</li></ul><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915170737.png" alt="Disable Auto" tabindex="0" loading="lazy"><figcaption>Disable Auto</figcaption></figure><ul><li>当关闭了自动同步后，请及时推送和拉取更新。</li></ul><h2 id="在其他-ide-中尝试" tabindex="-1"><a class="header-anchor" href="#在其他-ide-中尝试" aria-hidden="true">#</a> 在其他 IDE 中尝试</h2><p>在大多数 IDE 中，其实都具有 SSH 远程调试和代码同步的能力，例如 VS Code 等也可以通过点击</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915171048.png" alt="SSH VSC" tabindex="0" loading="lazy"><figcaption>SSH VSC</figcaption></figure><p>来连接到远程服务器中</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915171121.png" alt="SSH VSC" tabindex="0" loading="lazy"><figcaption>SSH VSC</figcaption></figure><p>输入 SSH 链接的命令后，即可像在本地打开 VS Code 一样来进行代码编写</p><figure><img src="https://raw.githubusercontent.com/Waynehfut/blog/img/img20210915171241.png" alt="SSH VSC" tabindex="0" loading="lazy"><figcaption>SSH VSC</figcaption></figure>',42),o=[n];function c(r,u){return t(),e("div",null,o)}const p=i(a,[["render",c],["__file","debugWithSSH.html.vue"]]);export{p as default};
